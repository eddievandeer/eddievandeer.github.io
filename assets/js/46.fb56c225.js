(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{438:function(t,v,_){"use strict";_.r(v);var a=_(0),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"网络"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),_("h2",{attrs:{id:"请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),_("ul",[_("li",[t._v("GET")]),t._v(" "),_("li",[t._v("POST")]),t._v(" "),_("li",[t._v("PUT")]),t._v(" "),_("li",[t._v("DELETE")]),t._v(" "),_("li",[t._v("OPTIONS")]),t._v(" "),_("li",[t._v("HEAD")]),t._v(" "),_("li",[t._v("TRACE")]),t._v(" "),_("li",[t._v("CONNECT")])]),t._v(" "),_("h2",{attrs:{id:"get-和-post-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),_("ul",[_("li",[t._v("GET 在传递参数时，会将数据拼接到 url 后，而 POST 则是放在 "),_("strong",[t._v("请求体")]),t._v(" 中传输")]),t._v(" "),_("li",[t._v("两者接受的编码不同， GET 只允许 "),_("code",[t._v("ASCII")]),t._v(" 字符，而 POST 则没有这个限制，也可以是二进制数据")]),t._v(" "),_("li",[t._v("安全性方面 POST 会更安全，因为 GET 发送的数据会在 url 中被看到，同时可以直接在浏览器地址栏里或者历史记录里看到传输的参数，从而导致数据的泄露")])]),t._v(" "),_("h2",{attrs:{id:"http-和-https-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-的区别"}},[t._v("#")]),t._v(" HTTP 和 HTTPS 的区别")]),t._v(" "),_("p",[t._v("之前看的《图解HTTP》中总结了这么一句话：")]),t._v(" "),_("blockquote",[_("p",[t._v("HTTPS = HTTP + 加密 + 认证 + 完整性保护")])]),t._v(" "),_("p",[t._v("HTTP 本身是明文传输的，内容容易被窃取，不安全。在 HTTPS 中通过 "),_("strong",[t._v("SSL")]),t._v(" 或 "),_("strong",[t._v("TSL")]),t._v(" 来实现加密通信的内容，可以说 HTTPS 不是一个新协议，只是身披 "),_("strong",[t._v("SSL")]),t._v(" 或 "),_("strong",[t._v("TSL")]),t._v(" 的 HTTP")]),t._v(" "),_("p",[t._v("由于 HTTP 请求和响应不会确认通信方的身份，在 HTTPS 中通过证书机制来完善这一缺陷。证书是由专门的权威机关发布的")]),t._v(" "),_("p",[t._v("HTTP 无法确定通信的报文的完整性，可能中途会被篡改（中间人攻击），因为 HTTPS 身披着 "),_("strong",[t._v("SSL")]),t._v(" 的外壳，是先通过和 "),_("strong",[t._v("SSL")]),t._v(" 进行通信，再由 "),_("strong",[t._v("SSL")]),t._v(" 和 "),_("strong",[t._v("TCP")]),t._v(" 通信。HTTPS 采用的是 "),_("strong",[t._v("混合加密机制")]),t._v(" ，先使用公开密钥加密方式安全的将共享密钥交换，再使用共享密钥来进行接下来的通信")]),t._v(" "),_("h2",{attrs:{id:"cookie-的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的作用"}},[t._v("#")]),t._v(" Cookie 的作用")]),t._v(" "),_("p",[t._v("由于 HTTP 是 “无状态” 的，服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担。但如果请求需要验证消息的话，不记忆状态反而带来了不便，Cookie 就是为此而生的")]),t._v(" "),_("p",[t._v("Cookie 由后端在发送响应请求的时候，附带一个 "),_("code",[t._v("Set-Cookie")]),t._v(" 请求头来设置，此后浏览器发送请求时，会自带 Cookie 进行请求。")]),t._v(" "),_("h2",{attrs:{id:"前端缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端缓存"}},[t._v("#")]),t._v(" 前端缓存")]),t._v(" "),_("h3",{attrs:{id:"memory-cache"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[t._v("#")]),t._v(" memory cache")]),t._v(" "),_("p",[t._v("内存缓存，保证了在一个页面中，如果有多次相同的请求，如：两个 "),_("code",[t._v("src")]),t._v(" 相同的 "),_("code",[t._v("img")]),t._v(" 和 "),_("code",[t._v("href")]),t._v(" 相同的 "),_("code",[t._v("link")]),t._v(" 都会只请求一次，然后以后就从内存中取出，在关闭页面之后就会从内存中清除")]),t._v(" "),_("h3",{attrs:{id:"disk-cache"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[t._v("#")]),t._v(" disk cache")]),t._v(" "),_("p",[t._v("硬盘缓存，允许相同的资源在跨会话甚至跨站点中使用，会严格按照 HTTP 请求头中的信息判断是否可以缓存")]),t._v(" "),_("h3",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-control")]),t._v(" "),_("p",[t._v("这个就是刚提到的控制是否缓存的请求头，该请求头的各个值及其查询顺序如下 "),_("a",{attrs:{href:"https://web.dev/http-cache/",target:"_blank",rel:"noopener noreferrer"}},[t._v("(图片来自 https://web.dev/http-cache/)"),_("OutboundLink")],1),t._v("：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://upyun.cavalheiro.cn/images/htXr84PI8YR0lhgLPiqZ.png",alt:"流程图"}})]),t._v(" "),_("h3",{attrs:{id:"强缓存和协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存和协商缓存"}},[t._v("#")]),t._v(" 强缓存和协商缓存")])])}),[],!1,null,null,null);v.default=r.exports}}]);