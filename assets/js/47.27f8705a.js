(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{439:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),a("h2",{attrs:{id:"javascript-有哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-有哪些数据类型"}},[t._v("#")]),t._v(" JavaScript 有哪些数据类型")]),t._v(" "),a("p",[t._v("基本数据类型：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("number")])]),t._v(" "),a("li",[a("strong",[t._v("string")])]),t._v(" "),a("li",[a("strong",[t._v("boolean")])]),t._v(" "),a("li",[a("strong",[t._v("null")])]),t._v(" "),a("li",[a("strong",[t._v("undefined")])]),t._v(" "),a("li",[a("strong",[t._v("symbol")])]),t._v(" "),a("li",[a("strong",[t._v("bigint")])])]),t._v(" "),a("p",[t._v("引用类型： "),a("strong",[t._v("object")])]),t._v(" "),a("h2",{attrs:{id:"在-js-中为什么-0-2-0-1-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-js-中为什么-0-2-0-1-0-3"}},[t._v("#")]),t._v(" 在 js 中为什么 0.2+0.1>0.3")]),t._v(" "),a("p",[t._v("在 js 中浮点数是使用 64 位固定长度来表示的，其中 1 位表示符号位，11 位表示指数位，剩下的 52 位表示尾数位。由于尾数位只有 52 位，就会出现十进制转二进制时，若第 52 位后面还有则会被省略，这样再转回十进制的时候就会产生精度缺失")]),t._v(" "),a("h3",{attrs:{id:"那为什么-0-2-0-3-0-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那为什么-0-2-0-3-0-5"}},[t._v("#")]),t._v(" 那为什么 0.2+0.3=0.5？")]),t._v(" "),a("p",[t._v("同样也是因为位数只有 52 位，"),a("code",[t._v("0.2+0.3")]),t._v(" 的计算结果在大于 52 位的位置才不是 0 ，而 52 位后的会被省略，因此结果还是等于 0.5")]),t._v(" "),a("h3",{attrs:{id:"十进制小数转二进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十进制小数转二进制"}},[t._v("#")]),t._v(" 十进制小数转二进制")]),t._v(" "),a("p",[t._v("每次乘以 2 ，取计算结果整数位，然后去除整数位，一直重复计算至计算结果为 0")]),t._v(" "),a("p",[t._v("这里举个例子，转换十进制的 0.8125 为二进制：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upyun.cavalheiro.cn/images/image-20211224170934318.png",alt:"image-20211224170934318"}})]),t._v(" "),a("h2",{attrs:{id:"判断数据类型有哪几种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型有哪几种方法"}},[t._v("#")]),t._v(" 判断数据类型有哪几种方法")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[t._v("此方法的缺点是：当遇上 "),a("code",[t._v("null")]),t._v(" 时值为 "),a("code",[t._v("object")]),t._v(" ，所以无法区分 "),a("code",[t._v("null")]),t._v(" 和 "),a("code",[t._v("object")]),t._v(" 的类型。这是因为在 JavaScript 中，不同的对象都是使用二进制存储的，如果二进制的前三位都是 0 的话会被判断为 "),a("code",[t._v("Object")]),t._v(" 类型，而 "),a("code",[t._v("null")]),t._v(" 的二进制全为 0")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'number'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'string'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'boolean'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'undefined'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'symbol'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'bigint'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'object'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'object'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("h3",{attrs:{id:"object-prototype-tostring-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call()")]),t._v(" "),a("p",[t._v("该方法可以准确区分各种类型的数据，但不能区分是谁的实例，或者说是分不清对象是由哪一个构造函数创建的。我们还可以将其封装成一个获取类型的方法，来简化一些操作：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'null'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'array'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'date'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h3",{attrs:{id:"instanceof-和-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-和-constructor"}},[t._v("#")]),t._v(" instanceof 和 constructor")]),t._v(" "),a("p",[t._v("这两个方法用于判断对象是属于哪个类构造的，区别在于 "),a("code",[t._v("instanceof")]),t._v(" 只能通过遍历对象的原型链，判断对象的原型上是否存在目标构造函数的原型对象，对于原始值（如 Number 、String 等）无法判断，需要使用原始值包装类型创建的才可以判定")]),t._v(" "),a("p",[t._v("另一个 "),a("code",[t._v("constructor")]),t._v(" 则可以对原始值使用，即使是直接定义的原始值也可以通过 "),a("code",[t._v("constructor")]),t._v(" 属性获取它的构造函数，再判断获取的构造函数是否等于对应的原始值包装类即可")]),t._v(" "),a("h2",{attrs:{id:"手写一个-call-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写一个-call-函数"}},[t._v("#")]),t._v(" 手写一个 call 函数")]),t._v(" "),a("p",[t._v("实现思路：")]),t._v(" "),a("ul",[a("li",[t._v("判断调用 "),a("code",[t._v("call")]),t._v(" 的是否是函数，不是则抛出异常")]),t._v(" "),a("li",[t._v("获取上下文 "),a("code",[t._v("context")]),t._v(" ，若没有传入则默认使用 "),a("code",[t._v("window")])]),t._v(" "),a("li",[t._v("将调用 "),a("code",[t._v("call")]),t._v(" 的函数保存至 "),a("code",[t._v("context")]),t._v(" 上")]),t._v(" "),a("li",[t._v("从 "),a("code",[t._v("arguments")]),t._v(" 中获取传入的参数")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("context.fn(args)")]),t._v(" 的方式调用函数")]),t._v(" "),a("li",[t._v("执行完后删除 "),a("code",[t._v("context")]),t._v(" 上的 "),a("code",[t._v("fn")])]),t._v(" "),a("li",[t._v("返回执行函数执行的结果")])]),t._v(" "),a("p",[t._v("同样的思路，只要将传参的方式改为传入数组，即可实现 "),a("code",[t._v("apply")]),t._v(" 函数")]),t._v(" "),a("p",[t._v("详细代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myCall")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Not a function!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window\n\n    context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h2",{attrs:{id:"手写一个-bind-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写一个-bind-函数"}},[t._v("#")]),t._v(" 手写一个 bind 函数")]),t._v(" "),a("p",[t._v("实现思路：")]),t._v(" "),a("ul",[a("li",[t._v("判断调用 "),a("code",[t._v("bind")]),t._v(" 的是否是函数，不是则抛出异常")]),t._v(" "),a("li",[t._v("获取上下文 "),a("code",[t._v("context")]),t._v(" ，若没有传入则默认使用 "),a("code",[t._v("window")])]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("_this")]),t._v(" 保存调用 "),a("code",[t._v("bind")]),t._v(" 的函数")]),t._v(" "),a("li",[t._v("返回一个新的函数，在这个新的函数里使用 "),a("code",[t._v("apply")]),t._v(" 函数调用 "),a("code",[t._v("_this")]),t._v(" ，并返回值")])]),t._v(" "),a("p",[t._v("详细代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myBind")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Not a function!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" window\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _this "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"什么是闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[t._v("#")]),t._v(" 什么是闭包")]),t._v(" "),a("p",[t._v("闭包的本质是一个引用了其他函数作用域中的变量的函数，此时被引用的变量所在的作用域不会被垃圾回收机制回收")]),t._v(" "),a("p",[t._v("闭包的一些应用：")]),t._v(" "),a("ul",[a("li",[t._v("设计模式中的单例模式")]),t._v(" "),a("li",[t._v("以前的 for 循环涉及回调、异步的，会导致所有回调获取到的索引值都是循环最后的结果")]),t._v(" "),a("li",[t._v("防抖函数和节流函数")]),t._v(" "),a("li",[t._v("函数柯里化")]),t._v(" "),a("li",[t._v("实现对象的私有变量")])]),t._v(" "),a("h2",{attrs:{id:"了解浏览器的垃圾回收机制么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解浏览器的垃圾回收机制么"}},[t._v("#")]),t._v(" 了解浏览器的垃圾回收机制么")]),t._v(" "),a("p",[t._v("在浏览器的发展史上，最主要的垃圾回收机制有两种：标记清除和引用计数")]),t._v(" "),a("h3",{attrs:{id:"标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),a("p",[t._v("这是 JavaScript 中最常用的垃圾回收策略，具体实现为：")]),t._v(" "),a("p",[t._v("当变量进入上下文，比如在函数内声明一个变量，这个变量会被加上一个存在于上下文的标记；当变量离开上下文，加上一个离开的标记。随后垃圾回收程序做一次内存清理，销毁带标记的变量，并回收它们的内存")]),t._v(" "),a("h3",{attrs:{id:"引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),a("p",[t._v("相比之下这种方法会显得没那么常用，其思路是：")]),t._v(" "),a("p",[t._v("对每个值都记录它被引用的次数，声明变量时为 1 ，而后每次值被赋予另一个变量时，引用次数 +1 。若引用该值的变量被其他值覆盖了，则引用次数 -1 。若有哪个值的引用次数减少为 0 时，则回收该值所处内存。但这个方式有个致命的缺点，若是出现了循环引用，则会导致对象永远无法被回收")]),t._v(" "),a("h2",{attrs:{id:"什么是原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型和原型链"}},[t._v("#")]),t._v(" 什么是原型和原型链")]),t._v(" "),a("p",[t._v("原型的本质也是一个对象，每一个对象都会有一个内部指针 "),a("code",[t._v("[[Prototype]]")]),t._v(" 指向它的原型，而每个函数（箭头函数除外）都有一个 "),a("code",[t._v("prototype")]),t._v(" 属性指向函数的原型，在使用该函数构造一个对象时，会将构造出来的对象 "),a("code",[t._v("[[Prototype]]")]),t._v(" 指针指向函数的 "),a("code",[t._v("prototype")])]),t._v(" "),a("p",[t._v("多个原型对象用内部指针 "),a("code",[t._v("[[Prototype]]")]),t._v(" 连接起来，就组成了原型链。这一链状结构和继承息息相关。 JS 是通过委托机制进行对象间的数据共享，若在对象自身上请求不到目标属性，则会将该请求委托给它的原型对象，若再没有则继续委托给原型的原型，一级一级往上委托，直到访问属性的请求被处理，或是最后也没找到返回 "),a("code",[t._v("undefined")])]),t._v(" "),a("h2",{attrs:{id:"说一说-js-中常用的继承方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一说-js-中常用的继承方式"}},[t._v("#")]),t._v(" 说一说 JS 中常用的继承方式")]),t._v(" "),a("p",[t._v("关于 JS 中的继承，我有一篇文章 "),a("a",{attrs:{href:"https://juejin.cn/post/7043255540478115877",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解JavaScript中的继承"),a("OutboundLink")],1),t._v(" 对其进行了详细的介绍")]),t._v(" "),a("p",[t._v("这里简单的列举一下 JS 中实现继承的方式：")]),t._v(" "),a("ul",[a("li",[t._v("原型链继承")]),t._v(" "),a("li",[t._v("盗用构造函数")]),t._v(" "),a("li",[t._v("组合继承")]),t._v(" "),a("li",[t._v("原型式继承")]),t._v(" "),a("li",[t._v("寄生式继承")]),t._v(" "),a("li",[t._v("寄生组合继承")]),t._v(" "),a("li",[t._v("ES6 的 "),a("code",[t._v("extends")]),t._v(" 关键字")])])])}),[],!1,null,null,null);s.default=e.exports}}]);